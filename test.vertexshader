#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec3 vertexColor;

uniform mat4 MVP;
uniform mat3 m_3x3_inv_transp;

out vec4 fragmentColor;

struct lightSource
{
  vec4 position;
  vec4 diffuse;
};

lightSource light0 = lightSource(
    vec4(10.0, 10.0, 20.0, 0.0),
    vec4(1.0, 1.0, 1.0, 1.0)
);

struct material
{
  vec4 ambient;
  vec4 diffuse;
};

material mymaterial = material(
  vec4(1, 0, 0, 1),
  vec4(1.0, 0.5, 0, 1.0)
  );

vec3 ambient_light = vec3(0.2, 0.2, 0.2);
 
void toColor(in float x, out float result) {
  result = clamp((x + 1) / 2, 0, 1);
}
 
void main() {
    // material m = mymaterial;

    vec3 lightDirection = normalize(vec3(light0.position));
    vec3 normal = normalize(vertexNormal_modelspace);
    vec3 ambientColor = vec3(vertexColor) * vec3(ambient_light); 
    
    vec3 diffuseReflection = vec3(light0.diffuse) * vec3(vertexColor) * clamp(dot(normal, lightDirection), 0, 1);
 
    float d = clamp(dot(normal, normalize(lightDirection)), 0, 1);
    fragmentColor = vec4(diffuseReflection + ambientColor, 1.0);
 
    gl_Position = MVP * vec4(vertexPosition_modelspace, 1);
}
